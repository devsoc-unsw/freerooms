name: Docker
on:
  push:
    branches:
      - "master"
      - "dev"

env:
  ENVIRONMENT: ${{ github.ref_name == 'master' && 'prod' || 'staging' }}
  IMAGE_NAME: ${{ github.ref_name == 'master' && 'freerooms' || 'freerooms-staging' }}

jobs:
  build:
    name: "Build (${{ matrix.name }})"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        context: [backend, frontend]
        include:
          - context: backend
            name: backend
          - context: frontend
            name: frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Create staging .env file
        if: ${{ env.BRANCH_NAME == 'dev' && matrix.context == 'frontend' }}
        run: echo "NEXT_PUBLIC_STAGING=true" >> .env
        working-directory: frontend
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          file: ${{ matrix.context }}.dockerfile
          tags: |
            ghcr.io/devsoc-unsw/${{ env.IMAGE_NAME }}-${{ matrix.name }}:${{ github.sha }}
            ghcr.io/devsoc-unsw/${{ env.IMAGE_NAME }}-${{ matrix.name }}:latest
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    name: Deploy (CD)
    runs-on: ubuntu-latest
    needs: [build]
    concurrency: staging
    if: ${{ github.event_name != 'pull_request' && (github.ref_name == 'dev' || github.ref_name == 'master')  }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: devsoc-unsw/deployment
          token: ${{ secrets.GH_TOKEN }}
          ref: dev
      - name: Install yq - portable yaml processor
        uses: mikefarah/yq@v4.44.3
      - name: Update deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "CSESoc CD"
          git config user.email "technical@csesoc.org.au"

          git checkout -b update/${{ env.IMAGE_NAME }}/${{ github.sha }}
          yq -i '.items[0].spec.template.spec.containers[0].image = "ghcr.io/devsoc-unsw/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"' projects/freerooms/${{ env.ENVIRONMENT }}/deploy-backend.yml
          yq -i '.items[0].spec.template.spec.containers[0].image = "ghcr.io/devsoc-unsw/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"' projects/freerooms/${{ env.ENVIRONMENT }}/deploy-frontend.yml

          git add . 
          git commit -m "feat(${{ env.IMAGE_NAME }}): update images" 
          git push -u origin update/${{ env.IMAGE_NAME }}/${{ github.sha }}
          gh pr create -B dev --title "feat(${{ env.IMAGE_NAME }}): update image" --body "Updates the image for the ${{ env.IMAGE_NAME }} deployment to commit devsoc-unsw/${{ env.IMAGE_NAME }}@${{ github.sha }}." > URL
          gh pr merge $(cat URL) --squash -d
